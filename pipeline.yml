# Use YAML anchors to keep us DRY in our Tasks/Jobs
# git_resource_params: &git_resource_params
#   branch: main
#   username: ((github_username))
#   password: ((github_pat))

git_pat_token_details: &git_pat_token_details
  username: ((cec_concourse_team_creation_git_hub_username)) # Value dynamically retrieved from AWS Secrets Manager
  password: ((cec_concourse_team_creation_git_hub_pat)) # Value dynamically retrieved from AWS Secrets Manager

# resource_types:
# - name: pull-request
#   type: registry-image
#   source:
#     repository: teliaoss/github-pr-resource

resources:
- name: concourse-blog-test
  type: git
  icon: github
  check_every: 1h
  # webhook_token: ((concourse-shared-recipes-webhook-token))
  source:
    uri: https://github.com/sky-uk/joshua-concourse-blog-test
    <<: *git_pat_token_details

# - name: pull-request
#   type: pull-request
#   icon: git
#   check_every: 1h
#   webhook_token: ((concourse-shared-recipes-webhook-token))
#   source:
#     repository: sky-uk/concourse-shared-recipes
#     access_token: ((git_hub_pat))

jobs:
- name: concourse-blog-test
  plan:
  - get: concourse-blog-test
    trigger: true
  # - put: pull-request
  #   params:clear

  #     path: pull-request
  #     status: pending
  - task: unit-test # The series of tasks that contain the logic to run your tests and CI scripts. A simple example is shown below.
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: python } # Specify a Docker image that contains what we need to run our tests
      inputs:
        - name: concourse-blog-test
      run:
        path: /bin/sh
        args:
          - -exc
          - |
            cd concourse-blog-test
            find *
    # on_failure: # Runs when the task fails
    #   put: update-status # Alias the pull-request so we can use `skip_download` without affecting subsequent tasks that rely on the Github repo
    #   resource: pull-request
    #   get_params: {skip_download: true} # Don't run the implicit get when pushing a status update
    #   params:
    #     path: pull-request
    #     status: failure
    # on_success: # Runs when the task is successful
    #   put: update-status
    #   resource: pull-request
    #   get_params: {skip_download: true}
    #   params:
    #     path: pull-request
    #     status: success

# - name: set-pipeline
#   plan:
#   - get: concourse-blog-test
#     trigger: true
#   - set_pipeline: concourse-blog-test
#     file: concourse/pipelines/pipeline.yml